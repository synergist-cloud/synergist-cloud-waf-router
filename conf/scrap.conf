
server {
        #proxy_pass_header Set-Cookie;
        listen *:8080;
    	#default_type  text/json;
        #resolver                  8.8.8.8 valid=300s;
	    #resolver_timeout          10s;
    default_type 'text/html';
        
        #ssl off;

root   html;




    
    #include includes/synergist_ssl_cert.conf;

    #charset koi8-r;                                                                                                                                                                                                                            
    #access_log  /var/log/nginx/log/host.access.log  main;                                                                                                                                                               
    error_page  404              /404.html;

    # redirect server error pages to the static page /50x.html                                                                                                                                                                                  
    #                                                                                                                                                                                                                                           
    error_page   500 502 503 504  /50x.html;
    location = /50x.html {
root   html;
    }

        resolver                  8.8.8.8 valid=300s;
    location /read_write_file {
        content_by_lua_block {
	   local function requiref(module)
              require(module)
           end
           res = pcall(requiref,"io")
	   if not(res) then
	       ngx.say("Sorry, io module not found")
	   else
	       local file_path_str = "/etc/nginx/conf.d/test.lua"
	       local file = io.open(file_path_str, "r")
	       if file==nil
               then
                   ngx.say(file_path_str .. " can\'t read or does not exists")
                   return
		else
		   ngx.say("file found")
		   -- sets the default input file
                    io.input(file)

                    -- read the lines in table lines
                    for line in io.lines() do
 		    	ngx.say(line)
                    end
		    
		   io.close(file)
		end
	   end
	}
    }

    location /fetch_template_data {
      	content_by_lua_block {
	   local key_str = ngx.var.arg_key or ""
	   if( key_str ~= "" )
           then
		local db = connect_db()
                if db == nil then
                   outputData['error'] = "Failed to connect to database"
                   ngx.say(cjson.encode(outputData))
                   return
                end
                local res = get_key(db, key_str)
		if( res and res['error'] and res['error'] ~= "") then
		   ngx.say(cjson.encode(res))
		elseif( res['aaData'] and res['aaData'] ~= "") then
		   local contentData = cjson.decode(res['aaData'])
		   local tempContentStr= processTokens(db, contentData['content'], tokensArr)
		   contentData["content"] = tempContentStr
		   ngx.say(cjson.encode(contentData))
		else
		  outputData['error'] = "Template not found"
                  ngx.say(cjson.encode(outputData))
		end
		close_db(db)
                return
	   else
		ngx.say("Please pass the required parameters")
	   end
	}
    }	
    location /api_set {
    	content_by_lua_block {
	   local outputData = {}
	   local key_str = ngx.var.arg_key or ""
	   local value_str = ngx.var.arg_value or ""
	   if( key_str ~= "" and value_str ~= "" )
           then
		local db = connect_db()
                if db == nil then
                   outputData['error'] = "Failed to connect to database"
                   ngx.say(cjson.encode(outputData))
                   return
                end
		local res = set_key(db, key_str, value_str)
		ngx.say(cjson.encode(res))

		close_db(db)
		return
	   else
		ngx.say("Please pass the required parameters")
	   end
	}   
    }
    location /api_post_key {
       content_by_lua_block {
           local outputData = {}
           local key_str = ""
	   local value_str = ""
	      ngx.req.read_body()
              local args, err = ngx.req.get_post_args()
              if not args then
	      	 outputData['error'] = "Failed to get post args: "..err
              	 ngx.say(cjson.encode(outputData))
             	 return
              end
	      for key, val in pairs(args) do
		if key == "key" then
		   key_str = val
		elseif key == "value" then
		       value_str = val
                end
              end

	   if( key_str ~= "" and value_str ~= "" )
	   then
	       local inputContentStr = cjson.decode(value_str)
	       local timeLocalNow = os.time(os.date('*t'))
	       inputContentStr["modified"] = timeLocalNow
	       
	       local db = connect_db()
               if db == nil then
                    outputData['error'] = "Failed to connect to database"
                    ngx.say(cjson.encode(outputData))
                    return
               end

			local res = set_key(db, key_str, cjson.encode(inputContentStr))
                        ngx.say(cjson.encode(res))

                        -- or just close the connection right away:
			close_db(db)
			return
           else
		outputData['error'] = "Please pass the required parameters"
                ngx.say(cjson.encode(outputData))
	   end
	   return
       }
    }
	location /api_set_key {
            content_by_lua_block {
		local outputData = {}
		local key_str = ngx.var.arg_key or ""
		local value_str = ngx.var.arg_value or ""
		local args = ngx.req.get_uri_args()
		for key, val in pairs(args) do
		    if key == "key" then
		       key_str= val
		    elseif key == "value" then
		       value_str = val
		    end
		end

		if( key_str ~= "" and value_str ~= "" )
                then
		    local inputContentStr = cjson.decode(value_str)
		    local timeLocalNow = os.time(os.date('*t'))

			inputContentStr["modified"] = timeLocalNow
			
			local db = connect_db()
                        if db == nil then
                            outputData['error'] = "Failed to connect to database"
                            ngx.say(cjson.encode(outputData))
                            return
                        end
			
			local res = set_key(db, key_str, cjson.encode(inputContentStr))
                        ngx.say(cjson.encode(res))

			-- or just close the connection right away:
			close_db(db)
			return	
		else
			outputData['error'] = "Please pass the required parameters"
                	ngx.say(cjson.encode(outputData))
		end

           }
        }

	location /api_get_key {
            content_by_lua_block {
                local unique_str = ngx.var.arg_key or ""
		local args = ngx.req.get_uri_args()
		for key, val in pairs(args) do
		    if key == "key" then
		       unique_str = val
		    end
		end
		      local outputData = {}
                if( unique_str~="" )
                    then
				local db = connect_db()
				      	 if db == nil then
					           outputData['error'] = "Failed to connect to database"
                            ngx.say(cjson.encode(outputData))
                            return
				end
						local res = get_key(db, unique_str)
						      	  ngx.say(cjson.encode(res))
                        -- or just close the connection right away:
			      close_db(db)
                        return
                 else
                        outputData['error'] = "Please pass the required parameters"
                        ngx.say(cjson.encode(outputData))
					return
                 end
            }
        }	

	location /api_delete_key {
	    content_by_lua_block {
                local unique_str = ngx.var.arg_key or ""
                local outputData = {}
                if( unique_str~="" )
                    then
			local db = connect_db()
                        if db == nil then
                            outputData['error'] = "Failed to connect to database"
                            ngx.say(cjson.encode(outputData))
                            return
			end

			local res = del_key(db, unique_str)
			ngx.say(cjson.encode(res))

                         -- or just close the connection right away:
			 close_db(db)
                         return
                 else
                        outputData['error'] = "Please pass the required parameters"
                        ngx.say(cjson.encode(outputData))
                 end
            }
        }

        location /api_fetch_list {
                 content_by_lua_block {
		       			ngx.say("API FETCH LIST REQUEST OK")


                   local outputJson={}
		        local db = connect_db()
                        if db == nil then
                            outputJson['error'] = "Failed to connect to database"
                            ngx.say(cjson.encode(outputJson))
                            return
                         end

			 local prefix_str = ngx.var.arg_search or ""
			 if( prefix_str~="" ) then
			     prefix_str = prefix_str..'*'
			 else
			     prefix_str = '*'
			 end
			 
			 local res, err = db:keys(prefix_str)
                         if not res then
			    outputJson['error'] = "Failed to search"..err
                            ngx.say(cjson.encode(outputJson))
                            return
                         end
			 local arrayVal = {}
			 local countNum = 0
			 for _,key in ipairs(res) do
                             countNum = countNum + 1
			  
			     local res = get_key(db, key)
			     if( res['aaData'] and res['aaData'] ~= "") then
			        local tempObject ={}
			     	tempObject["key"]=key
			     	tempObject["value"]=cjson.encode(res['aaData'])
			     	arrayVal[countNum]= tempObject
			     end
                     	 end                      

			 outputJson["iTotalRecords"]=countNum
			 outputJson["aaData"]=arrayVal
			 ngx.say(cjson.encode(outputJson))

                         -- or just close the connection right away:
			 close_db(db)
                         return
                }


        }

	location /api_update_oauth_value {
        	 content_by_lua_block {
               	      local auth_token_str = ngx.var.arg_auth or ""
               	      local token_str =ngx.var.arg_key or ""

               	      if( auth_token_str~="" and token_str~="")
               	      then
		          local db = connect_db()
			  if db == nil then
                    	     ngx.say("failed to connect: ", err)
			     return
               		  end
  			  local res = get_key(db, token_str)
			  if( res and res['error'] and res['error'] ~= "") then
			      ngx.say(cjson.encode(res))
			  elseif( res and res['aaData'] and res['aaData'] ~= "") then
			      local tempValue = cjson.decode(res['aaData'])
			      tempValue['oauth'] = auth_token_str
			      local timeLocalNow = os.time(os.date('*t'))
                    	      tempValue["modified"] = timeLocalNow
			      tempValue = cjson.encode(tempValue)
			      
			      local res = set_key(db, token_str, tempValue)
			      ngx.say(cjson.encode(res))
			  else
				ngx.say(token_str.." not found.")
                          end

                    -- or just close the connection right away:
		    close_db(db);
		    return
                else
			ngx.say("Please pass the required parameters")
                end
            }
        }
	location /api_set_site {
            content_by_lua_block {
		local outputData = {}
		local key_str = ""
                local value_str = ""
                local args = ngx.req.get_uri_args()
                for key, val in pairs(args) do
                    if key == "code" then
                       key_str= val
                    elseif key == "value" then
                       value_str = val
                    end
                end

                if( key_str ~= "" and value_str ~= "" )
                then
			local inputContentStr = cjson.decode(value_str)

		   local timeLocalNow = os.time(os.date('*t'))
		   inputContentStr["modified"] = timeLocalNow

		   local db = connect_db()
                   if db == nil then
                      outputData['error'] = "Failed to connect to database"
                      ngx.say(cjson.encode(outputData))
                      return
		   end
		
		   key_str = "site:"..key_str

		   local get_res, get_err = db:get(key_str)
		   if not get_res then
		      inputContentStr["created"] = timeLocalNow
		   end

		   if get_res == ngx.null then
		      inputContentStr["created"] = timeLocalNow
		   else
		       local tempExistingValueArr = cjson.decode(get_res)
		       if(tempExistingValueArr["hosts"] and (tempExistingValueArr["hosts"]~="")) then
		          local existingHostsArr= cjson.decode(tempExistingValueArr["hosts"])
			  local i=1
			  while ( i <= table.getn(existingHostsArr) ) do
			      db:del("host:"..existingHostsArr[i]["host_name"])
			      i = i+1
			  end
		       end
		   end

		   ok, err = db:set(key_str, cjson.encode(inputContentStr))
		   if not ok then
		      outputData['error'] = "Failed to set "..key_str..": "..err
		      ngx.say(cjson.encode(outputData))
		      return
		   end

		   if(inputContentStr["hosts"] and inputContentStr["hosts"]~="") then
		   	local hostsContentArr = cjson.decode(inputContentStr["hosts"])
			local l  = 1
			local m  = table.getn(hostsContentArr)
			while ( l <= m ) do
			      local tempHostName = "host:"..hostsContentArr[l].host_name
			      local tempHostContentArr = hostsContentArr[l]
			      for key, val in pairs(inputContentStr) do
			      	  if(key~="hosts") then
				     tempHostContentArr[key] = val
				  end 
			      end 
			      db:set(tempHostName, cjson.encode(tempHostContentArr))
			      l = l + 1
			end
		   end

		   outputData["success"] = "OK"
		   ngx.say(cjson.encode(outputData))

		   -- or just close the connection right away:
		   close_db(db);
		   return

		 else
		    outputData['error'] = "Please pass the required parameters"
                    ngx.say(cjson.encode(outputData))
		 end
               }
        }





        location  /control_panel {
            lua_need_request_body on;
            client_max_body_size 50k;
            client_body_buffer_size 50k;
            access_by_lua_file /usr/local/openresty/lua/scripts/control_panel_handler.lua;
        }
    }



