upstream backend_dynamic {
server 0.0.0.1:1000 max_fails=3 fail_timeout=5s;
balancer_by_lua_block {
local balancer = require "ngx.balancer"
local ok, err = balancer.set_current_peer("10.116.130.30", 8081)
if not ok then
ngx.log(ngx.ERR, "failed to set the current peer: ", err)
return ngx.exit(500)
end
}
keepalive 512;
}

server {
listen       80;
server_name  localhost.webcrm.io;

#charset koi8-r;
#access_log  logs/host.access.log  main;

root   html;

include static_images.conf;

location / {

set $backend_waf    "WAF_CORE";
default_type      'text/plain';

access_by_lua_block {
local lua_resty_waf = require "resty.waf"

local waf = lua_resty_waf:new()

-- define options that will be inherited across all scopes
waf:set_option("debug", true)
waf:set_option("mode", "ACTIVE")

waf:set_option("event_log_target", "file")
waf:set_option("event_log_target_path", "/tmp/waf.log")
-- waf:set_option("event_log_target", "error")
waf:set_option("event_log_request_headers", true)
waf:set_option("event_log_request_arguments", true)
waf:set_option("event_log_request_body", true)
waf:set_option("event_log_periodic_flush", 1)

-- defines multiple allowed Content-Type values
waf:set_option("allowed_content_types", { "text/html", "test/plain", "text/json", "application/json" })

-- this may be desirable for low-traffic or testing sites
-- by default, event logs are not written until the buffer is full
-- for testing, flush the log buffer every 5 seconds
--
-- this is only necessary when configuring a remote TCP/UDP
-- socket server for event logs. otherwise, this is ignored
waf:set_option("event_log_periodic_flush", 5)

-- run the firewall
waf:exec()

}

header_filter_by_lua_block {
local lua_resty_waf = require "resty.waf"

-- note that options set in previous handlers (in the same scope)
-- do not need to be set again
local waf = lua_resty_waf:new()

waf:exec()
}

body_filter_by_lua_block {
local lua_resty_waf = require "resty.waf"

local waf = lua_resty_waf:new()

waf:exec()
}


log_by_lua_block {
local lua_resty_waf = require "resty.waf"

local waf = lua_resty_waf:new()

-- write out any event log entries to the
-- configured target, if applicable
waf:write_log_events()
}

#error_page 403 = @__on_after_waf_failed_event__;

#try_files $uri @__on_after_waf_passed_event__;
try_files $uri @__balancer_on_after_waf_passed_event__;

#content_by_lua '
#    res = ngx.location.capture(url)
#local url = '/__on_after_waf_passed_event__'
#    ngx.say(res.status)
#';

}


location @__balancer_on_after_waf_passed_event__
{
lua_need_request_body on;
client_max_body_size 250k;
client_body_buffer_size 50k;

#add_header Server "Matrix";
proxy_set_header Host "tenthmatrix.co.uk";

header_filter_by_lua_block {
ngx.header["server"] = "Matrix"
}


proxy_pass http://backend_dynamic;

}


location @__on_after_waf_passed_event__
{
lua_need_request_body on;
client_max_body_size 250k;
client_body_buffer_size 50k;

set $template_root /usr/local/openresty/nginx/html/templates;

rewrite_by_lua_file /usr/local/openresty/lua/scripts/router.lua;

}


location @__on_after_waf_failed_event__
{
rewrite_by_lua_file /usr/local/openresty/lua/scripts/on_waf_failed_event.lua;
}


#location /xxx {
#    root   html;
#   index  index.html index.htm;
#}

#error_page  404              /404.html;

# redirect server error pages to the static page /50x.html
#
#error_page   500 502 503 504  /50x.html;
#location = /50x.html {
#}

# proxy the PHP scripts to Apache listening on 127.0.0.1:80
#
#location ~ \.php$ {
#    proxy_pass   http://127.0.0.1;
#}

# pass the PHP scripts to FastCGI server listening on 127.0.0.1:9000
#
#location ~ \.php$ {
#    root           html;
#    fastcgi_pass   127.0.0.1:9000;
#    fastcgi_index  index.php;
#    fastcgi_param  SCRIPT_FILENAME  /scripts$fastcgi_script_name;
#    include        fastcgi_params;
#}

# deny access to .htaccess files, if Apache's document root
# concurs with nginx's one
#
#location ~ /\.ht {
#    deny  all;
#}
}
